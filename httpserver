#!/usr/bin/env python3
import argparse
import http
import socket
import subprocess
import json
from http.server import BaseHTTPRequestHandler, HTTPServer

from cache import RepliCache
from utils import get_local_ip

PORT = 25016
ORIGIN_PORT = "8080"
ORIGIN_SERVER = "cs5700cdnorigin.ccs.neu.edu"
GRADING_BEACON_PATH = "/grading/beacon"

cache_test_mode = True
if cache_test_mode:
    print("Cache running in test mode")

repli_cache = RepliCache(test_mode=cache_test_mode)


class CdnHttpHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == GRADING_BEACON_PATH:
            self.send_response(204)
            self.send_header("Host", socket.gethostname())
            self.end_headers()
        else:
            found, data = repli_cache.get(self.path)
            if not found:
                self.send_error(code=http.HTTPStatus.NOT_FOUND)
                return

            self.send_response(200)
            self.send_header("Content-Type", "text/html; charset=utf-8")
            self.send_header("Content-Encoding", "gzip")
            self.send_header("Content-Length", str(len(data)))
            self.send_header("Host", socket.gethostname())
            self.end_headers()
            self.wfile.write(data)


def measure(client_ips: list) -> dict:
    measurements = {}
    scamper_output = subprocess.check_output(["scamper", "-c", "ping", "-i", *client_ips, "-O", "json"]).decode()
    scamper_output = scamper_output.split('\n')[1:-2]
    for line in scamper_output:
        json_object = json.loads(line)
        dst_ip = json_object['dst']
        rtt = json_object['statistics']['avg']
        measurements[dst_ip] = rtt
    print(measurements)
    return measurements


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", type=int, help="the port number the server will bind to")
    parser.add_argument("-o", type=str, help="the name of the origin server")
    args = parser.parse_args()
    return args


def main():
    global ORIGIN_SERVER
    args = parse_args()
    port = args.p
    ORIGIN_SERVER = args.o
    web_server = HTTPServer((get_local_ip(), port), CdnHttpHandler)
    try:
        print(f"Starting replica at http://{get_local_ip()}:{port}")
        web_server.serve_forever()
    except KeyboardInterrupt:
        web_server.server_close()
        print("Server stopped")


if __name__ == "__main__":
    main()
